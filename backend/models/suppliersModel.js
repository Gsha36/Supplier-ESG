import mongoose, { Schema } from "mongoose";
import { User } from "./userModel.js";

// Define the Supplier schema
const supplierSchema = new Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      index: true,
    },
    companyName: {
      type: String,
      // unique: true,
      trim: true,
    },
    supplierID: {
      type: Schema.Types.ObjectId, // Auto-generated by MongoDB
    },
    address: {
      type: String,
      trim: true,
    },
    total_revenue: {
      type: Number,
    },
    ESGScore: {
      type: Number,
      min: 0,
      max: 100,
    },
    panCard: {
      type: String,
      trim: true,
      unique: true, // PAN should be unique to each supplier
    },
    GSTNo: {
      type: String,
      trim: true,
      unique: true, // GST No should also be unique
    },
    data: {
      type: Object,
      default: {},
    },
    esgReport: {
      type: Schema.Types.ObjectId,
      ref: "ESGReport",
    },
    suppliesTo: [
      {
        companyName: {
          type: String,
          trim: true,
        },
        companyID: {
          type: Schema.Types.ObjectId,
          ref: "Company",
        },
        date: {
          type: Date,
        },
      },
    ],
    questions: [
      {
        environment: {
          environmentalManagement: [
            {
              question: String,
              answer: String,
            },
          ],
          climateChange: [
            {
              question: String,
              answer: String,
            },
          ],
          airPollution: [
            {
              question: String,
              answer: String,
            },
          ],
          hazardousMaterialManagement: [
            {
              question: String,
              answer: String,
            },
          ],
          naturalResourceManagement: [
            {
              question: String,
              answer: String,
            },
          ],
          wasteManagement: [
            {
              question: String,
              answer: String,
            },
          ],
          regulatoryCompliance: [
            {
              question: String,
              answer: String,
            },
          ],
          pollutionPrevention: [
            {
              question: String,
              answer: String,
            },
          ],
        },
        social: {
          workerHealthSafety: [
            {
              question: String,
              answer: String,
            },
          ],
          humanRightsLabourPractices: [
            {
              question: String,
              answer: String,
            },
          ],
          regulatoryComplianceSocial: [
            {
              question: String,
              answer: String,
            },
          ],
          consumerSafetyProductSafety: [
            {
              question: String,
              answer: String,
            },
          ],
          communityInvolvement: [
            {
              question: String,
              answer: String,
            },
          ],
        },
        governance: {
          supplyChainManagement: [
            {
              question: String,
              answer: String,
            },
          ],
          dataPrivacySecurityManagement: [
            {
              question: String,
              answer: String,
            },
          ],
        },
        timePeriod: {
          type: Date,
          required: true, // Each entry will have its own time period
        },
      },
    ],
  },
  {
    timestamps: true,
  }
);

supplierSchema.post("save", async function (doc, next) {
  try {
    // Find the corresponding user with the same username
    const user = await User.findOne({ username: doc.username });

    if (user) {
      // Update the user's supplier field with the current supplier's _id
      user.supplier = doc._id;
      await user.save();

      console.log("User updated with supplier info:", user);
    } else {
      console.log("No user found with the username matching the supplier.");
    }
    next();
  } catch (error) {
    console.error("Error populating user with supplier info:", error);
    next(error); // Pass the error to the next middleware
  }
});

export const Supplier = mongoose.model("Supplier", supplierSchema);
